func setvar() {			// at 0x806A391
     push {r4, r5, lr}
     r5 = r0			// save r0 in r5
     r0 = (word) getInvWord	// call 0x080698F8
     call @0x0806E454
     r4 = r0
     r5 = r0
     [r4] = getInvWord		// call 0x080698F8
     r0 = 0
     pop {r4, r5, r1}
     goto r1
}

func @0x0806E454 {		// at 0x0806E454
     push {r4-r6, lr}
     r4 = (word) r0
     r6 = r4
     if (r4 > 0x3FFF)
       r0 = r4 << 16
       if (r0 >= 0)
       	  r0 = [0x0806E484]	// = 0x03005E88
	  r0 = (byte) [r0]
	  if (r0 == 1)
	     r0 = 0		// at 0x0806E488
	     r1 = r4
	     call 0x08112D40
	     r2 = r0
	     if (r0 != 0)
	     	r0 = [0x0806E4B0]	// = 0x03005008
	     	r1 = [r0]
	     	r0 = (r4 + 0xffffC000) << 1
	     	r3 = 0x80 << 5
	     	r1 += r3 + r0
	     	r0 = [r2]
	     	[r1] = r0
       else if (r0 == 2)
	     r5 = r4 + 0xffffc000	// at 0x0806E4B8
	     r0 = (word) r5
	     r1 = 1
	     call 0x0806E528
	     r0 = (r0 << 24) >> 24
	     if (r0 == 1)		// else goto 0x0806E4EE
	     	r0 = [0x0806e500]	// = 0x0300507C
		[r0] = r5
		r0 = [0x0806E504]	// = 0x03005008
		r1 = [r0]
		r0 = (r4 + 0xFFFFC000) << 1
		r3 = 0x80 << 5
		r1 += r3 + r0
		r2 = [r1]
		r0 = 0
		r1 = r4
		call 0x08112DB0
       r0 = [0x0806E504]		// = 0x03005008
       r1 = (r6 << 1) + 0xFFFF9000
       r0 = [r0]
       r0 += r1
       pop {r1, r4-r6}
       goto r1
       } else {
       	  goto 0x080605ec	// ?
       }
     } else {
       r0 = 0
       pop {r1, r4-r6}
       goto r1
     }
}

// Get a word with inverted bytes
// The bytes are read by following two successive pointers at r0 + 8
// IN	r0	Pointer
// OUT	r0	Inverted word
func getInvWord {	// at 0x080698F8
     r3 = r0
     r2 = [r3 + 8]
     r0 = (byte) [r2]
     r2++
     [r3 + 8] = r2
     r1 = (byte) [r2]
     r1 = r1 << 8
     r0 |= r1
     r2++
     [r3 + 8] = r2
}
